<pre><div class="bg-black rounded-md"><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-markdown"># Django Mini-Loan App

This Django application is designed to manage loan requests, user authentication, and loan repayments.

## Table of Contents

- [Overview](#overview)
- [Installation](#installation)
- [Usage](#usage)
- [Structure](#structure)
- [Models](#models)
- [Views](#views)
- [URLs](#urls)
- [Authentication](#authentication)


## Overview

The Mini-Loan app allows users to request loans, view loan details, and manage repayments. It consists of several components:

- **Models**: Defines the database structure including `Customer`, `Loan`, and `Repayment`.
- **Views**: Handles user interactions and data rendering using Django's views.
- **URLs**: Manages the routing and URL configurations for different app functionalities.
- **Authentication**: Manages user authentication using Django's built-in authentication system.

## Installation

1. Clone this repository:
   ```bash
   git clone https://github.com/Danuragtiwari/mini-loan.git
</code></div></div></pre>

2. Apply migrations:

```
<pre><div class="bg-black rounded-md"><div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"></svg></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-bash">python manage.py migrate
</code></div></div></pre>
```

  3.Apply migrations:

## Usage

To start the Django development server:

<pre><div class="bg-black rounded-md"><div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>bash</span></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-bash">python manage.py runserver
</code></div></div></pre>

Access the app through `http://localhost:8000/`.

Admin credential:

username: admin

password: admin

## Structure

* `app/`: Contains the Django app files.
  * `models.py`: Defines the database models.
  * `views.py`: Handles the app's views and logic.
  * `urls.py`: Manages the app's URL routing.
* `templates/`: Holds HTML templates for rendering views.

## Models

### `Customer`

Represents a user and is associated with a Django `User` instance.

Fields:

* `user`: One-to-One relationship with Django's `User` model.

### `Loan`

Represents a loan request.

Fields:

* `customer`: Foreign key relationship with `Customer`.
* `amount`: Decimal field to store the loan amount.
* `term`: Integer field to represent the loan term.
* `state`: Char field for the loan state (e.g., PENDING, APPROVED).

### `Repayment`

Stores repayment details for loans.

Fields:

* `loan`: Foreign key relationship with `Loan`.
* `amount`: Decimal field for the repayment amount.
* `scheduled_date`: Date field for the scheduled repayment date.
* `status`: Char field for the repayment status (e.g., PENDING, PAID).

## Views

#### 1. `add_repayment(request, loan_id)`

-**Description**: Handles the addition of repayments for a given loan.
-**Dependencies**: Requires a logged-in user, uses `Repayment` model.
-**Features**:

- Processes user input for repayment amount.
- Updates repayment status and loan status accordingly.
- Redirects to the loan overview page (`loan_view`).

#### 2. `change_loan_status(request, loan_id)`

- **Description**: Allows staff members to change the status of a loan.
- **Dependencies**: Requires staff privileges, uses `Loan` model.
- **Features**:
  - Accepts a new status via a form.
  - Updates the loan status.
  - Redirects to the loan overview page (`loan_view`).

#### 3. `signup(request)`

-**Description**: Handles user registration.
-**Dependencies**: Uses Django's `UserCreationForm`.
-**Features**:

- Validates and saves new user registration.
- Authenticates the user.
- Redirects to the login page.

#### 4. `user_login(request)`

- **Description**: Manages user login.
- **Dependencies**: Uses Django's `AuthenticationForm`.
- **Features**:
  - Authenticates user credentials.
  - Redirects to the loan overview page (`loan_view`) on successful login.

#### 5. `user_logout(request)`

- **Description**: Logs out the user.
- **Features**:
  - De-authenticates the user.
  - Redirects to the login page.

#### 6. `create_loan(request)`

-**Description**: Facilitates the creation of a new loan.
-**Dependencies**: Requires a logged-in user, uses `Loan` model.
-**Features**:

- Processes user input for loan amount and term.
- Creates a new loan instance.
- Redirects to the loan overview page (`loan_view`).

#### 7. `approve_loan(request, loan_id)`

-**Description**: Allows staff members to approve a loan.
-**Dependencies**: Requires staff privileges, uses `Loan` model.
-**Features**:

- Changes the loan status to 'APPROVED'.
- Redirects to the loan overview page (`loan_view`).

#### 8. `view_loans(request)`

- **Description**: Displays a list of loans based on user roles.
- **Dependencies**: Uses `Loan` and `Customer` models.
- **Features**:
  - Differentiates between staff and regular users.
  - Retrieves and displays relevant loan information.

## Urls


#### 1.`/create_loan/`

   -**View Function**: `create_loan`
   -**Description**: Allows users to create a new loan by providing loan amount and term.
   -**Name**: `create_loan`

#### 2.`/approve_loan/<int:loan_id>/`

   -**View Function**: `approve_loan`
   -**Description**: Enables staff members to approve a particular loan using its ID.
   -**Name**: `approve_loan`

#### 3.`/change_loan_status/<int:loan_id>`

   -**View Function**: `change_loan_status`
   -**Description**: Provides staff members the ability to modify the status of a specific loan.
   -**Name**: `change_loan_status`

#### 4.`/view_loans/`

   -**View Function**: `view_loans`
   -**Description**: Displays a list of loans based on user roles.
   -**Name**: `loan_view`

#### 5.`/add_repayment/<int:loan_id>/`

   -**View Function**: `add_repayment`
   -**Description**: Allows users to add repayments for a specific loan using its ID.
   -**Name**: `add_repayment`

#### 6.`/signup/`

   -**View Function**: `signup`
   -**Description**: Handles user registration.
   -**Name**: `signup`

#### 7.`/login`

   -**View Function**: `user_login`
   -**Description**: Displays the login page for user authentication.
   -**Name**: `login`

#### 8.`/logout/`

   -**View Function**: `user_logout`
   -**Description**: Logs out the current user.
   -**Name**: `logout`

<pre><div class="bg-black rounded-md"><div class="flex items-center relative text-gray-200 bg-gray-800 dark:bg-token-surface-primary px-4 py-2 text-xs font-sans justify-between rounded-t-md"></div><div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-css">
This structure provides a starting point to explain various aspects</code></div></div></pre>
